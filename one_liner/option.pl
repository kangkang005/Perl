# @web: https://www.junmajinlong.com/perl/perl_options_vars/

=pod;
=head1 -e
其中 -e 或 -E 选项用于指定待运行的表达式，它们之间的不同点在于 -E 会自动启用高版本功能特性，
例如可以直接使用 say () 函数而无需先 use 5.010;。
=head1 -n 和 -p
-n 选项使得 perl 单行命令以类似于如下代码的方式运行：
C<<
LINE:
    while(<>){
        ...-e expression CODE HERE...
    }
>>
-p 选项使得 perl 单行命令以类似于如下代码的方式运行：
C<<
LINE:
    while(<>){
        ...-e expression CODE HERE...
    }continue{
        print or die "-p destination: $!\n";
    }
>>
=head2 何时使用 - p，何时使用 - n
1. 只要不操作文件，就不需要 - n 和 - p
2. 当某些行不需要输出，或者需要被删除的时候，也就是说不需要输出所有行时，不应该使用 - p，因为它默认会输出所有行
    * 换句话说，如果需要输出所有行，就可以考虑使用 - p
    * 使用 - p 的时候，在 - e 表达式中只需操作 $_，例如对 $_的赋值、s 替换，此时不需要额外的 print，但有些操作是可以隐藏 $_的，最常见的就是 s 替换命令
3. 不使用 - p 的时候，几乎总是可以使用 - n，这时需要在 - e 表达式中手动 print
4. 如果处理文件的需求实在复杂，那么不要 - n 和 - p，自己在 - e 中写文件读取的逻辑。但这种情况很少，真的出现这种情况，一般写成 Perl 脚本更好
=head1 -l 选项
选项开启自动行尾处理功能。它有两个过程：
1. 和 - n 和 - p 一起使用的时候，将自动对输入行执行 chomp 剔除输入行终止符
2. 将 print 的输出行分隔符变量 $\ 设置为 OCTNUM 的八进制数值，OCTNUM 的 ASCII 字符将追加在输出的每一行行尾。如果省略了 OCTNUM，则将 $\ 设置为输入行分隔符变量 $/ 的值，通常是换行符
需要注意的是，省略 OCTNUM 的时候，也就是只有 - l 的时候，会在处理这个选项的那一刻就完成 $\ = $/ 的赋值，所以对于 -ln0e EXPRESSION 将进行两段赋值：
C<<
# 处理-l的时候
$\ = $/;
# 处理-0的时候
$/ = \0;
>>
这使得输出行分隔符取输入行分隔符的值，并在之后修改输入行分隔符。
注意上面的 - 0 选项不能直接放在 - l 选项后 (也就是 -l0ne)，这会产生歧义，认为 0 是 - l 选项的参数值，而不是 - 0 选项。
一般来说，-l 选项是用来为 print 函数追加换行符的，所以 -l 经常结合 - n 选项一起使用。例如:
C<<
$ perl -lne 'print' file.log
# equal to
$ perl -pe '$_' file.log
>>
=head1 -0 选项
设置输入行分隔符 $/：
C<<
-0[octal/hexadecimal]
>>
特别地，设置 -00 表示将 $/ 设置为空 ""，即 $/ = ""，这表示按段落读取到 $_且压缩连续空行。
=cut;